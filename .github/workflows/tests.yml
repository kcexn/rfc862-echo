name: Tests

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [main]

jobs:
  tests:
    name: Test and Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gcc g++ ccache cmake python3-all

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('.github/workflows/tests.yml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python dependencies
        run: pip install gcovr

      - name: Create ccache directory
        run: mkdir -p ~/.ccache

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-test-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.hpp', '**/*.h', '**/*.c') }}
          restore-keys: |
            ccache-test-${{ runner.os }}-

      - name: Cache CMake build directory
        uses: actions/cache@v4
        with:
          path: |
            build/debug/_deps
            build/debug/CMakeCache.txt
            build/debug/CMakeFiles
          key: test-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', 'CMakePresets.json') }}
          restore-keys: |
            test-${{ runner.os }}-

      - name: Configure ccache
        run: |
          ccache --set-config=max_size=400M
          ccache --set-config=compression=true
          ccache --zero-stats

      - name: Configure Cmake with tests and coverage.
        run: |
          cmake --preset debug \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCB_SEGMENT_BUILD_EXAMPLES=OFF \
            -DCB_SEGMENT_BUILD_DOCS=OFF

      - name: Build with tests
        run: cmake --build --preset debug

      - name: Print ccache stats
        run: ccache --show-stats

      - name: Run tests
        run: ctest --preset debug --output-on-failure

      - name: Generate coverage XML
        if: github.ref == 'refs/heads/main'
        run: cmake --build --preset debug --target coverage-xml

      - name: Upload coverage to Codacy
        if: github.ref == 'refs/heads/main'
        uses: codacy/codacy-coverage-reporter-action@89d6c85cfafaec52c72b6c5e8b2878d33104c699
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: "./build/debug/coverage/coverage.xml"

      - name: Upload coverage reports
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: build/debug/coverage/
          retention-days: 7
